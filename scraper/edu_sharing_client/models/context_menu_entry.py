# coding: utf-8

"""
    edu-sharing Repository REST API

    The public restful API of the edu-sharing repository.  # noqa: E501

    OpenAPI spec version: 1.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class ContextMenuEntry(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'position': 'int',
        'icon': 'str',
        'name': 'str',
        'url': 'str',
        'is_disabled': 'bool',
        'is_seperate': 'bool',
        'is_seperate_bottom': 'bool',
        'only_desktop': 'bool',
        'mode': 'str',
        'ajax': 'bool',
        'permission': 'str',
        'toolpermission': 'str',
        'is_directory': 'bool',
        'multiple': 'bool',
        'remove': 'bool'
    }

    attribute_map = {
        'position': 'position',
        'icon': 'icon',
        'name': 'name',
        'url': 'url',
        'is_disabled': 'isDisabled',
        'is_seperate': 'isSeperate',
        'is_seperate_bottom': 'isSeperateBottom',
        'only_desktop': 'onlyDesktop',
        'mode': 'mode',
        'ajax': 'ajax',
        'permission': 'permission',
        'toolpermission': 'toolpermission',
        'is_directory': 'isDirectory',
        'multiple': 'multiple',
        'remove': 'remove'
    }

    def __init__(self, position=None, icon=None, name=None, url=None, is_disabled=False, is_seperate=False, is_seperate_bottom=False, only_desktop=False, mode=None, ajax=False, permission=None, toolpermission=None, is_directory=False, multiple=False, remove=False):  # noqa: E501
        """ContextMenuEntry - a model defined in Swagger"""  # noqa: E501
        self._position = None
        self._icon = None
        self._name = None
        self._url = None
        self._is_disabled = None
        self._is_seperate = None
        self._is_seperate_bottom = None
        self._only_desktop = None
        self._mode = None
        self._ajax = None
        self._permission = None
        self._toolpermission = None
        self._is_directory = None
        self._multiple = None
        self._remove = None
        self.discriminator = None
        if position is not None:
            self.position = position
        if icon is not None:
            self.icon = icon
        if name is not None:
            self.name = name
        if url is not None:
            self.url = url
        if is_disabled is not None:
            self.is_disabled = is_disabled
        if is_seperate is not None:
            self.is_seperate = is_seperate
        if is_seperate_bottom is not None:
            self.is_seperate_bottom = is_seperate_bottom
        if only_desktop is not None:
            self.only_desktop = only_desktop
        if mode is not None:
            self.mode = mode
        if ajax is not None:
            self.ajax = ajax
        if permission is not None:
            self.permission = permission
        if toolpermission is not None:
            self.toolpermission = toolpermission
        if is_directory is not None:
            self.is_directory = is_directory
        if multiple is not None:
            self.multiple = multiple
        if remove is not None:
            self.remove = remove

    @property
    def position(self):
        """Gets the position of this ContextMenuEntry.  # noqa: E501


        :return: The position of this ContextMenuEntry.  # noqa: E501
        :rtype: int
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this ContextMenuEntry.


        :param position: The position of this ContextMenuEntry.  # noqa: E501
        :type: int
        """

        self._position = position

    @property
    def icon(self):
        """Gets the icon of this ContextMenuEntry.  # noqa: E501


        :return: The icon of this ContextMenuEntry.  # noqa: E501
        :rtype: str
        """
        return self._icon

    @icon.setter
    def icon(self, icon):
        """Sets the icon of this ContextMenuEntry.


        :param icon: The icon of this ContextMenuEntry.  # noqa: E501
        :type: str
        """

        self._icon = icon

    @property
    def name(self):
        """Gets the name of this ContextMenuEntry.  # noqa: E501


        :return: The name of this ContextMenuEntry.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ContextMenuEntry.


        :param name: The name of this ContextMenuEntry.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def url(self):
        """Gets the url of this ContextMenuEntry.  # noqa: E501


        :return: The url of this ContextMenuEntry.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this ContextMenuEntry.


        :param url: The url of this ContextMenuEntry.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def is_disabled(self):
        """Gets the is_disabled of this ContextMenuEntry.  # noqa: E501


        :return: The is_disabled of this ContextMenuEntry.  # noqa: E501
        :rtype: bool
        """
        return self._is_disabled

    @is_disabled.setter
    def is_disabled(self, is_disabled):
        """Sets the is_disabled of this ContextMenuEntry.


        :param is_disabled: The is_disabled of this ContextMenuEntry.  # noqa: E501
        :type: bool
        """

        self._is_disabled = is_disabled

    @property
    def is_seperate(self):
        """Gets the is_seperate of this ContextMenuEntry.  # noqa: E501


        :return: The is_seperate of this ContextMenuEntry.  # noqa: E501
        :rtype: bool
        """
        return self._is_seperate

    @is_seperate.setter
    def is_seperate(self, is_seperate):
        """Sets the is_seperate of this ContextMenuEntry.


        :param is_seperate: The is_seperate of this ContextMenuEntry.  # noqa: E501
        :type: bool
        """

        self._is_seperate = is_seperate

    @property
    def is_seperate_bottom(self):
        """Gets the is_seperate_bottom of this ContextMenuEntry.  # noqa: E501


        :return: The is_seperate_bottom of this ContextMenuEntry.  # noqa: E501
        :rtype: bool
        """
        return self._is_seperate_bottom

    @is_seperate_bottom.setter
    def is_seperate_bottom(self, is_seperate_bottom):
        """Sets the is_seperate_bottom of this ContextMenuEntry.


        :param is_seperate_bottom: The is_seperate_bottom of this ContextMenuEntry.  # noqa: E501
        :type: bool
        """

        self._is_seperate_bottom = is_seperate_bottom

    @property
    def only_desktop(self):
        """Gets the only_desktop of this ContextMenuEntry.  # noqa: E501


        :return: The only_desktop of this ContextMenuEntry.  # noqa: E501
        :rtype: bool
        """
        return self._only_desktop

    @only_desktop.setter
    def only_desktop(self, only_desktop):
        """Sets the only_desktop of this ContextMenuEntry.


        :param only_desktop: The only_desktop of this ContextMenuEntry.  # noqa: E501
        :type: bool
        """

        self._only_desktop = only_desktop

    @property
    def mode(self):
        """Gets the mode of this ContextMenuEntry.  # noqa: E501


        :return: The mode of this ContextMenuEntry.  # noqa: E501
        :rtype: str
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this ContextMenuEntry.


        :param mode: The mode of this ContextMenuEntry.  # noqa: E501
        :type: str
        """

        self._mode = mode

    @property
    def ajax(self):
        """Gets the ajax of this ContextMenuEntry.  # noqa: E501


        :return: The ajax of this ContextMenuEntry.  # noqa: E501
        :rtype: bool
        """
        return self._ajax

    @ajax.setter
    def ajax(self, ajax):
        """Sets the ajax of this ContextMenuEntry.


        :param ajax: The ajax of this ContextMenuEntry.  # noqa: E501
        :type: bool
        """

        self._ajax = ajax

    @property
    def permission(self):
        """Gets the permission of this ContextMenuEntry.  # noqa: E501


        :return: The permission of this ContextMenuEntry.  # noqa: E501
        :rtype: str
        """
        return self._permission

    @permission.setter
    def permission(self, permission):
        """Sets the permission of this ContextMenuEntry.


        :param permission: The permission of this ContextMenuEntry.  # noqa: E501
        :type: str
        """

        self._permission = permission

    @property
    def toolpermission(self):
        """Gets the toolpermission of this ContextMenuEntry.  # noqa: E501


        :return: The toolpermission of this ContextMenuEntry.  # noqa: E501
        :rtype: str
        """
        return self._toolpermission

    @toolpermission.setter
    def toolpermission(self, toolpermission):
        """Sets the toolpermission of this ContextMenuEntry.


        :param toolpermission: The toolpermission of this ContextMenuEntry.  # noqa: E501
        :type: str
        """

        self._toolpermission = toolpermission

    @property
    def is_directory(self):
        """Gets the is_directory of this ContextMenuEntry.  # noqa: E501


        :return: The is_directory of this ContextMenuEntry.  # noqa: E501
        :rtype: bool
        """
        return self._is_directory

    @is_directory.setter
    def is_directory(self, is_directory):
        """Sets the is_directory of this ContextMenuEntry.


        :param is_directory: The is_directory of this ContextMenuEntry.  # noqa: E501
        :type: bool
        """

        self._is_directory = is_directory

    @property
    def multiple(self):
        """Gets the multiple of this ContextMenuEntry.  # noqa: E501


        :return: The multiple of this ContextMenuEntry.  # noqa: E501
        :rtype: bool
        """
        return self._multiple

    @multiple.setter
    def multiple(self, multiple):
        """Sets the multiple of this ContextMenuEntry.


        :param multiple: The multiple of this ContextMenuEntry.  # noqa: E501
        :type: bool
        """

        self._multiple = multiple

    @property
    def remove(self):
        """Gets the remove of this ContextMenuEntry.  # noqa: E501


        :return: The remove of this ContextMenuEntry.  # noqa: E501
        :rtype: bool
        """
        return self._remove

    @remove.setter
    def remove(self, remove):
        """Sets the remove of this ContextMenuEntry.


        :param remove: The remove of this ContextMenuEntry.  # noqa: E501
        :type: bool
        """

        self._remove = remove

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ContextMenuEntry, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ContextMenuEntry):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
