# coding: utf-8

"""
    edu-sharing Repository REST API

    The public restful API of the edu-sharing repository.  # noqa: E501

    OpenAPI spec version: 1.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class UserSimple(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'status': 'UserStatus',
        'authority_name': 'str',
        'authority_type': 'str',
        'user_name': 'str',
        'profile': 'UserProfile',
        'stats': 'UserStats'
    }

    attribute_map = {
        'status': 'status',
        'authority_name': 'authorityName',
        'authority_type': 'authorityType',
        'user_name': 'userName',
        'profile': 'profile',
        'stats': 'stats'
    }

    def __init__(self, status=None, authority_name=None, authority_type=None, user_name=None, profile=None, stats=None):  # noqa: E501
        """UserSimple - a model defined in Swagger"""  # noqa: E501
        self._status = None
        self._authority_name = None
        self._authority_type = None
        self._user_name = None
        self._profile = None
        self._stats = None
        self.discriminator = None
        if status is not None:
            self.status = status
        self.authority_name = authority_name
        if authority_type is not None:
            self.authority_type = authority_type
        if user_name is not None:
            self.user_name = user_name
        if profile is not None:
            self.profile = profile
        if stats is not None:
            self.stats = stats

    @property
    def status(self):
        """Gets the status of this UserSimple.  # noqa: E501


        :return: The status of this UserSimple.  # noqa: E501
        :rtype: UserStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this UserSimple.


        :param status: The status of this UserSimple.  # noqa: E501
        :type: UserStatus
        """

        self._status = status

    @property
    def authority_name(self):
        """Gets the authority_name of this UserSimple.  # noqa: E501


        :return: The authority_name of this UserSimple.  # noqa: E501
        :rtype: str
        """
        return self._authority_name

    @authority_name.setter
    def authority_name(self, authority_name):
        """Sets the authority_name of this UserSimple.


        :param authority_name: The authority_name of this UserSimple.  # noqa: E501
        :type: str
        """
        if authority_name is None:
            raise ValueError("Invalid value for `authority_name`, must not be `None`")  # noqa: E501

        self._authority_name = authority_name

    @property
    def authority_type(self):
        """Gets the authority_type of this UserSimple.  # noqa: E501


        :return: The authority_type of this UserSimple.  # noqa: E501
        :rtype: str
        """
        return self._authority_type

    @authority_type.setter
    def authority_type(self, authority_type):
        """Sets the authority_type of this UserSimple.


        :param authority_type: The authority_type of this UserSimple.  # noqa: E501
        :type: str
        """
        allowed_values = ["USER", "GROUP", "OWNER", "EVERYONE", "GUEST"]  # noqa: E501
        if authority_type not in allowed_values:
            raise ValueError(
                "Invalid value for `authority_type` ({0}), must be one of {1}"  # noqa: E501
                .format(authority_type, allowed_values)
            )

        self._authority_type = authority_type

    @property
    def user_name(self):
        """Gets the user_name of this UserSimple.  # noqa: E501


        :return: The user_name of this UserSimple.  # noqa: E501
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """Sets the user_name of this UserSimple.


        :param user_name: The user_name of this UserSimple.  # noqa: E501
        :type: str
        """

        self._user_name = user_name

    @property
    def profile(self):
        """Gets the profile of this UserSimple.  # noqa: E501


        :return: The profile of this UserSimple.  # noqa: E501
        :rtype: UserProfile
        """
        return self._profile

    @profile.setter
    def profile(self, profile):
        """Sets the profile of this UserSimple.


        :param profile: The profile of this UserSimple.  # noqa: E501
        :type: UserProfile
        """

        self._profile = profile

    @property
    def stats(self):
        """Gets the stats of this UserSimple.  # noqa: E501


        :return: The stats of this UserSimple.  # noqa: E501
        :rtype: UserStats
        """
        return self._stats

    @stats.setter
    def stats(self, stats):
        """Sets the stats of this UserSimple.


        :param stats: The stats of this UserSimple.  # noqa: E501
        :type: UserStats
        """

        self._stats = stats

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UserSimple, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserSimple):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
